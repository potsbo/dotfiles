#!/usr/bin/env bash

set -eu
: ${DOTFILES_PATH:="$HOME/.dotfiles"}

ARGS=('')
for a in "$@"; do
  ARGS=(${ARGS[@]} "$a")
done

ansible_check() {
  if brew info ansible | grep "Not installed" > /dev/null 2>&1
  then
    echo "    + Installing ansible..."
    brew install ansible
  else
    echo "    + ansible found."
  fi
}

install_brew() {
  echo "  + Homebrew"
  if test ! $(which brew); then
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  else
    echo "    + Homebrew found."
  fi
}

link_check() {
  if [[ ! -f "$2" && ! -d "$2" && ! -L "$2" ]]; then
    ln -s $1 $2
  fi
}

check_name() {
  echo "  + Machine Name"
  MACHINE=${MACHINE:-$(hostname | sed -e 's/\.local//g')}
  if [[ $MACHINE =~ ^[a-z\-]+$ ]]; then
    echo "    + $MACHINE is valid."
  else
    echo "    + $MACHINE is not valid."
    exit 1
  fi
}

set_ssh_key() {
  echo "  + SSH key"

  KEYS=($MACHINE $MACHINE.github)
  for name in ${KEYS[@]}; do
    path=~/.ssh/$name
    if [[ ! -f "$path" && ! -L "$path" ]]; then
      ssh-keygen -f $path -t rsa -N ''
    else
      echo "      + $name exists."
    fi
    link_check $path ~/.ssh/$name
  done
}

clone_or_update_repo() {
  local git_dir="$DOTFILES_PATH/.git"

  if [ -d "$git_dir" ]; then
    echo 'Updating repo...'

    if [ "$(git --git-dir="$git_dir" symbolic-ref --short HEAD 2> /dev/null)" != "master" ]; then
      echo 'skip (working on a non-master branch)'
      return
    fi

    if ! git --git-dir="$git_dir" diff --no-ext-diff --quiet --exit-code > /dev/null 2>&1; then
      echo 'skip (unstaged changes present)'
      return
    fi

    if ! git --git-dir="$git_dir" diff-index --cached --quiet HEAD -- > /dev/null 2>&1; then
      echo 'skip (uncommitted changes present)'
      return
    fi

    git --git-dir="$git_dir" pull origin master
    git --git-dir="$git_dir" submodule sync
    echo 'done'
  elif ! [ -d "$DOTFILES_PATH" ]; then
    echo 'Cloning repo...'
    git clone --recursive git://github.com/potsbo/dotfiles.git --branch master $DOTFILES_PATH
    echo 'done'
  fi
}

clone_or_update_repo
check_name
set_ssh_key
install_brew
ansible_check

# ansible
$DOTFILES_PATH/provisioning/run.sh ${ARGS[@]}
